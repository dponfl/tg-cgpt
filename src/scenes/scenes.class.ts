import { Kysely } from 'kysely';
import { Context, Markup } from 'telegraf';
import { BaseScene } from 'telegraf/scenes';
import { IBotContext } from '../bot/bot.interface.js';
import { MySceneCommand } from '../commands/base_scenes/command.class.js';
import { GptCommand } from '../commands/base_scenes/gpt.command.js';
import { HelpCommand } from '../commands/base_scenes/help.command.js';
import { MenuCommand } from '../commands/base_scenes/menu.command.js';
import { MjCommand } from '../commands/base_scenes/mj.command.js';
import { PaymentCommand } from '../commands/base_scenes/payment.command.js';
import { StartCommand } from '../commands/base_scenes/start.command.js';
import { InfoCommand } from '../commands/base_scenes/info.command.js';
import { IConfigService } from '../config/config.interface.js';
import { AiTextResponsePayload, ControllerStatus, IMainController, OpenAiChatFinishReason, RequestCategory } from '../controller/controller.interface.js';
import { ILogger } from '../logger/logger.interface.js';
import { IGetPaymentLinkParams, IGetPaymentLinkResponse, IPaymentService } from '../payments/payments.interface.js';
import { GroupTransactionCurrency, GroupTransactionServiceName, IDatabase } from '../storage/mysql.interface.js';
import { ISessionService } from '../storage/session.interface.js';
import { ChatSceneNames } from '../types.js';
import { IUtils } from '../utils/utils.class.js';
import { ISceneGenerator } from './scenes.interface.js';
import { Update } from 'telegraf/types';
import { ConfigService } from '../config/config.service.js';

export class ScenesGenerator implements ISceneGenerator {

	private commands: MySceneCommand[] = [];
	private readonly textOnMessage =
		`
–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º ‚è≥

`;

	private readonly secondRequestText =
		`
<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å</b> üîÑ

–ü–æ—Å–ª–µ –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üëåüèº

`;

	private readonly pushToPayText =
		`
–ö <i>—Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É</i>, <b>—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å–æ –º–Ω–æ–π ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b> üëá
`;

	private readonly errorResponseText =
		`
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å üôèüèæ

`;

	constructor(
		private readonly logger: ILogger,
		private readonly configService: IConfigService,
		private readonly mainController: IMainController,
		private readonly sessionService: ISessionService,
		private readonly utils: IUtils,
		private readonly dbConnection: Kysely<IDatabase>,
		private readonly robokassaService: IPaymentService
	) { }

	public async getScenes(): Promise<BaseScene[] | unknown[]> {
		const baseScenes = await this.getBaseScenes();
		const wizardScenes = await this.getWizardScenes();

		return [...baseScenes, ...wizardScenes];
	}

	public async getBaseScenes(): Promise<BaseScene[]> {
		return Promise.all([
			this.startIntro(),
			this.startNext(),
			this.mainGptScene(),
			this.afterPaymentGptScene(),
			this.mainMJScene(),
			this.afterPaymentMJScene(),
			this.menuScene(),
			this.paymentScene(),
			this.pushToPaymentScene(),
			this.infoScene(),
			this.helpScene()
		]);
	}

	public async getWizardScenes(): Promise<unknown[]> {
		return Promise.all([]);
	}

	private async activateCommands(scene: BaseScene): Promise<void> {

		/**
		 * Init scene commands
		 */

		this.commands = [
			new StartCommand(scene, this.logger, this.utils),
			new MenuCommand(scene, this.logger),
			new PaymentCommand(scene, this.logger),
			new GptCommand(scene, this.logger),
			new MjCommand(scene, this.logger),
			new InfoCommand(scene, this.logger),
			new HelpCommand(scene, this.logger),
		];

		for (const command of this.commands) {
			await command.handle();
		}

	}

	private async moveToRespectiveChat(ctx: IBotContext): Promise<void> {

		switch (ctx.session.botUserSession.chatName) {
			case ChatSceneNames.mainGptScene:
			case ChatSceneNames.afterPaymentGptScene:
				await ctx.scene.enter(ChatSceneNames.afterPaymentGptScene);
				break;

			case ChatSceneNames.mainMJScene:
			case ChatSceneNames.afterPaymentMJScene:
				await ctx.scene.enter(ChatSceneNames.afterPaymentMJScene);
				break;

			default:
				this.logger.error(`Unknown scene at ctx.session.botUserSession.chatName=${ctx.session.botUserSession.chatName}`);
				await ctx.scene.enter(ChatSceneNames.afterPaymentGptScene);
		}

	}


	/**
	 * Base scenes
	 */

	private async startIntro(): Promise<BaseScene> {

		const startIntro = new BaseScene('startIntro');

		// tslint:disable-next-line: no-any
		startIntro.enter(async (ctx: any) => {

			const text =
				`
<b>–ü—Ä–∏–≤–µ—Ç, —è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</b>, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å üôåüèª

<i>–Ø –±—É–¥—É –¥–ª—è –≤–∞—Å —Ç–µ–º —Å–∞–º—ã–º –î–∂–∞—Ä–≤–∏—Å–æ–º –∏–∑ —Ñ–∏–ª—å–º–∞ ¬´–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫¬ª</i> ü§ñ

<b>–Ø –æ—Å–Ω–æ–≤—ã–≤–∞—é —Å–≤–æ–∏ —Å–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ—Å—è—Ç–∫–∞—Ö —Ç—ã—Å—è—á–∞—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö –º–Ω–æ—é –∫–Ω–∏–≥, –æ–±–ª–∞–¥–∞—é –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>, <i>–º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã—Å—Ç—Ä–æ –¥–∞—é –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</i> üéØ

<i>–ù–∞–≥–ª—è–¥–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:</i>

<b>1.–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>
–≠—Å—Å–µ
–†–µ—Ñ–µ—Ä–∞—Ç
–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ 

<b>2.–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b>
–ë–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º 
–ö–æ–¥ –Ω–∞ PHP
–ö–æ–¥ –Ω–∞ Python 
–ö–æ–¥ –Ω–∞ Java 

<b>3.–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥</b>
–†–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤
–ü—Ä–æ–¥–∞—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º 
–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ 

<b>4.Midjourney</b>
–ú–µ–Ω—å –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞  
–í–∏–∑–∏—Ç–∫–∞ 
–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–∑

<i>–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –∏ 1% –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</i>, <b>–Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Å–∞–º–∏</b> üòâ
`;

			await ctx.replyWithHTML(text);

			setTimeout(async () => {
				await ctx.scene.enter('startNext');
			}, 5000);

		});

		return startIntro;
	}

	private async startNext(): Promise<BaseScene> {

		const startNext = new BaseScene('startNext');

		// tslint:disable-next-line: no-any
		startNext.enter(async (ctx: any) => {

			const text =
				`
<b>‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —ç—Ç–æ, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π –±—ã–ª–æ –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º‚ùóÔ∏è</b>

<b>1Ô∏è‚É£–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è –æ—Ç–≤–µ—Ç—ã</b> ‚Äî <i>–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i> –ß–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ –∏ —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —è —Å–º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å

<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ù–∞–ø–∏—à–∏ –º–Ω–µ —ç—Å—Å–µ –Ω–∞ 200 —Å–ª–æ–≤ –æ –ø–æ–ª—å–∑–µ –Ω–∞—Å–µ–∫–æ–º—ã—Ö, –Ω–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∞ —Ç–∞–∫ –∂–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥</i>

<b>2Ô∏è‚É£–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Midjourney</b> –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—É <i>/img</i> –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. 

<b>–ü—Ä–∏–º–µ—Ä:</b>
<i>/img: –º–∞–ª—å—á–∏–∫ —Å –º—è—á–æ–º –∏–≥—Ä–∞–µ—Ç —Å –∫–æ—à–∫–æ–π, –ª–µ—Å, –æ–∑–µ—Ä–æ.</i>

3Ô∏è‚É£–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî <b>–≤–≤–µ–¥–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—É</b> <i>/menu</i>
`;

			await ctx.replyWithHTML(text);
			setTimeout(async () => {
				await ctx.scene.enter('mainGptScene');
			}, 3000);

		});

		return startNext;
	}

	private async mainGptScene(): Promise<BaseScene> {

		const mainGptScene = new BaseScene('mainGptScene');

		await this.activateCommands(mainGptScene);

		const textMain =
			`
<b>–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–∞—Ç–µ Gpt</b> ü§ñ 

–°–µ–∫—Ä–µ—Ç—ã GPT (–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞)

<i>–í—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ</i> ‚Äî <b>–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–Ω–µ</b>. 

<i>–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ Midjourney</i> ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /img

`;

		// tslint:disable-next-line: no-any
		mainGptScene.enter(async (ctx: any) => {
			const { message_id: messageId } = await ctx.replyWithHTML(textMain);

			ctx.session.botUserSession.pinnedMessage = messageId;
			ctx.session.botUserSession.chatName = ChatSceneNames.mainGptScene;
			this.sessionService.updateSession(ctx);

			await ctx.pinChatMessage(messageId);
		});

		// tslint:disable-next-line: no-any
		mainGptScene.on('message', async (ctx: any) => {
			await this.gptOnMessage(ctx, mainGptScene);
		});

		// tslint:disable-next-line: no-any
		mainGptScene.action('stream_request', async (ctx: any) => {
			await this.gptActionStreamRequest(ctx, mainGptScene);
		});

		// tslint:disable-next-line: no-any
		mainGptScene.action('pay_package', async (ctx: any) => {

			await ctx.answerCbQuery();
			await ctx.replyWithHTML(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b><i>–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ</i></b>`);
			await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

			await ctx.scene.enter('pushToPaymentScene');

		});

		// tslint:disable-next-line: no-any
		mainGptScene.leave(async (ctx: any) => {
			if (ctx.session.botUserSession.pinnedMessage > 0) {
				try {
					await ctx.unpinChatMessage(ctx.session.botUserSession.pinnedMessage);
				} catch (err) {
					this.logger.error(`Error: Cannot perform unpinChatMessage: ${err}`);
				}
			}
		});

		// this.mainGptSceneProp = mainGptScene;

		return mainGptScene;
	}

	private async afterPaymentGptScene(): Promise<BaseScene> {

		const afterPaymentGptScene = new BaseScene('afterPaymentGptScene');

		await this.activateCommands(afterPaymentGptScene);

		// tslint:disable-next-line: no-any
		afterPaymentGptScene.enter(async (ctx: any) => {

			ctx.session.botUserSession.chatName = ChatSceneNames.afterPaymentGptScene;
			this.sessionService.updateSession(ctx);

		});

		// tslint:disable-next-line: no-any
		afterPaymentGptScene.on('message', async (ctx: any) => {
			await this.gptOnMessage(ctx, afterPaymentGptScene);
		});

		// tslint:disable-next-line: no-any
		afterPaymentGptScene.action('stream_request', async (ctx: any) => {
			await this.gptActionStreamRequest(ctx, afterPaymentGptScene);
		});

		// tslint:disable-next-line: no-any
		afterPaymentGptScene.action('pay_package', async (ctx: any) => {

			await ctx.answerCbQuery();
			await ctx.replyWithHTML(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b><i>–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ</i></b>`);
			await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

			await ctx.scene.enter('pushToPaymentScene');

		});


		// tslint:disable-next-line: no-any
		afterPaymentGptScene.leave(async (ctx: any) => {
		});

		return afterPaymentGptScene;
	}

	private async mainMJScene(): Promise<BaseScene> {

		const mainMJScene = new BaseScene('mainMJScene');

		await this.activateCommands(mainMJScene);

		const textMain =
			`
<b>–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ Midjourney</b> üèû

–°–µ–∫—Ä–µ—Ç—ã Midjourney (–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞)

<i>–í—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ</i> ‚Äî <b>–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–Ω–µ</b>. 

<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É GPT</i> ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /gpt

`;

		// tslint:disable-next-line: no-any
		mainMJScene.enter(async (ctx: any) => {
			const { message_id: messageId } = await ctx.replyWithHTML(textMain);

			ctx.session.botUserSession.pinnedMessage = messageId;
			ctx.session.botUserSession.chatName = ChatSceneNames.mainMJScene;

			this.sessionService.updateSession(ctx);

			await ctx.pinChatMessage(messageId);
		});


		// tslint:disable-next-line: no-any
		mainMJScene.on('message', async (ctx: any) => {

			if (ctx.session.botUserSession.pendingMjRequest) {

				// tslint:disable-next-line: no-shadowed-variable
				const { message_id } = await ctx.replyWithHTML(this.secondRequestText);
				setTimeout(() => {
					ctx.deleteMessage(message_id);
				}, 5000);

			} else {

				const { message_id } = await ctx.replyWithHTML(this.textOnMessage);

				const text = ctx.message.text;

				ctx.session.botUserSession.pendingMjRequest = true;

				this.sessionService.updateSession(ctx);

				// tslint:disable-next-line: max-line-length
				const userGuid = ctx.session.botUserSession.userGuid ? ctx.session.botUserSession.userGuid : this.utils.getChatIdStr(ctx);

				this.mainController.imgRequest(userGuid, text)
					.then(
						async (result) => {
							ctx.session.botUserSession.pendingMjRequest = false;
							this.sessionService.updateSession(ctx);
							const resText = result?.join('\n\n');
							await ctx.deleteMessage(message_id);
							await ctx.replyWithHTML(resText,
								{ reply_to_message_id: ctx.update.message.message_id });
						},
						async (error) => {

							this.logger.error(`Error response from mjImgRequest: ${error}`);

							ctx.session.botUserSession.pendingMjRequest = false;

							this.sessionService.updateSession(ctx);

							await ctx.deleteMessage(message_id);
							await ctx.replyWithHTML(this.errorResponseText,
								{ reply_to_message_id: ctx.update.message.message_id });
						}
					);

			}
		});

		// tslint:disable-next-line: no-any
		mainMJScene.leave(async (ctx: any) => {
			if (ctx.session.botUserSession.pinnedMessage > 0) {
				try {
					await ctx.unpinChatMessage(ctx.session.botUserSession.pinnedMessage);
				} catch (err) {
					this.logger.error(`Error: Cannot perform unpinChatMessage: ${err}`);
				}
			}
		});

		// this.mainMJSceneProp = mainMJScene;

		return mainMJScene;
	}

	private async afterPaymentMJScene(): Promise<BaseScene> {

		const afterPaymentMJScene = new BaseScene('afterPaymentMJScene');

		await this.activateCommands(afterPaymentMJScene);

		// tslint:disable-next-line: no-any
		afterPaymentMJScene.enter(async (ctx: any) => {

			ctx.session.botUserSession.chatName = ChatSceneNames.mainMJScene;

			this.sessionService.updateSession(ctx);
		});


		// tslint:disable-next-line: no-any
		afterPaymentMJScene.on('message', async (ctx: any) => {

			if (ctx.session.botUserSession.pendingMjRequest) {

				// tslint:disable-next-line: no-shadowed-variable
				const { message_id } = await ctx.replyWithHTML(this.secondRequestText);
				setTimeout(() => {
					ctx.deleteMessage(message_id);
				}, 5000);

			} else {

				const { message_id } = await ctx.replyWithHTML(this.textOnMessage);

				const text = ctx.message.text;

				ctx.session.botUserSession.pendingMjRequest = true;

				this.sessionService.updateSession(ctx);

				// tslint:disable-next-line: max-line-length
				const userGuid = ctx.session.botUserSession.userGuid ? ctx.session.botUserSession.userGuid : this.utils.getChatIdStr(ctx);

				this.mainController.imgRequest(userGuid, text)
					.then(
						async (result) => {
							ctx.session.botUserSession.pendingMjRequest = false;
							this.sessionService.updateSession(ctx);
							const resText = result?.join('\n\n');
							await ctx.deleteMessage(message_id);
							await ctx.replyWithHTML(resText,
								{ reply_to_message_id: ctx.update.message.message_id });
						},
						async (error) => {

							this.logger.error(`Error response from mjImgRequest: ${error}`);

							ctx.session.botUserSession.pendingMjRequest = false;

							this.sessionService.updateSession(ctx);

							await ctx.deleteMessage(message_id);
							await ctx.replyWithHTML(this.errorResponseText,
								{ reply_to_message_id: ctx.update.message.message_id });
						}
					);

			}
		});

		// tslint:disable-next-line: no-any
		afterPaymentMJScene.leave(async (ctx: any) => {
		});

		return afterPaymentMJScene;
	}

	private async menuScene(): Promise<BaseScene> {

		const menuScene = new BaseScene('menuScene');

		await this.activateCommands(menuScene);

		// tslint:disable-next-line: no-any
		menuScene.enter(async (ctx: any) => {

			const text =
				`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá
`;

			await ctx.replyWithHTML(text, Markup.inlineKeyboard([
				[
					Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ', 'make_payment')
				],
				[
					Markup.button.callback('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è', 'info')
				],
				[
					Markup.button.callback('–ü–æ–º–æ—â—å üë®üèªüîß', 'help')
				],
				[
					Markup.button.callback('–ù–∞–∑–∞–¥ –≤ GPT üîô', 'back')
				],
			]));

		});

		// tslint:disable-next-line: no-any
		menuScene.action('make_payment', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã"');
			await ctx.deleteMessage();
			await ctx.scene.enter('paymentScene');
		});

		// tslint:disable-next-line: no-any
		menuScene.action('info', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"');
			await ctx.deleteMessage();
			await ctx.scene.enter('infoScene');
		});

		// tslint:disable-next-line: no-any
		menuScene.action('help', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ü–æ–º–æ—â—å"');
			await ctx.deleteMessage();
			await ctx.scene.enter('helpScene');
		});

		// tslint:disable-next-line: no-any
		menuScene.action('back', async (ctx: any) => {
			await ctx.answerCbQuery('–í—ã—Ö–æ–¥ –∏–∑  "–ú–µ–Ω—é"');
			await ctx.deleteMessage();
			await ctx.scene.enter('mainGptScene');
		});

		menuScene.on('message', async (ctx) => {

			const text =
				`
–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ üëÜüèæ 

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Midjourney, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /img

`;

			const { message_id: messageId } = await ctx.replyWithHTML(text);

			// tslint:disable-next-line: no-shadowed-variable
			setTimeout(async () => {
				await ctx.deleteMessage(messageId);
			}, 10000);

		});

		// this.menuSceneProp = menuScene;

		return menuScene;
	}

	private async paymentScene(): Promise<BaseScene> {

		const paymentScene = new BaseScene('paymentScene');

		await this.activateCommands(paymentScene);

		// tslint:disable-next-line: no-any
		paymentScene.enter(async (ctx: any) => {

			const gptPrice = this.configService.get('PACKAGE_GPT_PRICE');
			const gptQty = this.configService.get('PACKAGE_GPT_QTY');
			const gptService = this.configService.get('PACKAGE_GPT_SERVICE');

			const mjPrice = this.configService.get('PACKAGE_MJ_PRICE');
			const mjQty = this.configService.get('PACKAGE_MJ_QTY');
			const mjService = this.configService.get('PACKAGE_MJ_SERVICE');

			const gpt_mjPrice = this.configService.get('PACKAGE_GPT_MJ_PRICE');
			const gpt_mj_gptQty = this.configService.get('PACKAGE_GPT_MJ_GPT_QTY');
			const gpt_mj_mjQty = this.configService.get('PACKAGE_GPT_MJ_MJ_QTY');
			const gpt_mj_mjService = this.configService.get('PACKAGE_GPT_MJ_SERVICE');

			const text =
				`
	–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã üëá 
	
	1) ${gptQty} –∑–∞–ø—Ä–æ—Å–æ–≤ <b>–¥–ª—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (GPT)</b> ‚Äî ${gptPrice}‚ÇΩ
	
	2) ${mjQty} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è <b>Midjourney</b> ‚Äî ${mjPrice}‚ÇΩ
	
	3) ${gpt_mj_gptQty} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è <b>–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (GPT)</b> + ${gpt_mj_mjQty} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è <b>Midjourney</b> ‚Äî ${gpt_mjPrice}‚ÇΩ
	`;

			/**
			 * Build payment links
			 */

			/**
			 * Check if the user have unused payment links
			 */

			if (!ctx.session.botUserSession.userGuid) {
				this.logger.error(`ERROR: No botUserSession.userGuid: ${JSON.stringify(ctx.session.botUserSession)}, will try to restore data.`);

				/**
				 * –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
				 */

				const { fromId, chatId } = this.utils.getChatIdObj(ctx);

				if (!fromId || !chatId) {
					throw new Error(`ERROR: missing fromId or chatId: fromId=${fromId}, chatId=${chatId}`);
				}

				const userRecRaw = await this.dbConnection
					.selectFrom('users')
					.select('guid')
					.where('fromId', '=', fromId)
					.where('chatId', '=', chatId)
					.execute();

				if (!userRecRaw) {
					throw new Error(`ERROR: No user rec for fromId=${fromId} and chatId=${chatId}`);
				}

				const { guid } = userRecRaw[0];

				ctx.session.botUserSession.userGuid = guid;

				this.sessionService.updateSession(ctx);

			}

			const gptParamsRobokassa: IGetPaymentLinkParams = {
				amount: Number(gptPrice),
				currency: GroupTransactionCurrency.RUB,
				description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ GPT —Å–µ—Ä–≤–∏—Å (${gptQty} –∑–∞–ø—Ä–æ—Å–æ–≤)`,
				uid: ctx.session.botUserSession.userGuid,
				serviceName: GroupTransactionServiceName.GPT,
				purchasedQty: gptService,
			};

			const mjParamsRobokassa: IGetPaymentLinkParams = {
				amount: Number(mjPrice),
				currency: GroupTransactionCurrency.RUB,
				description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Midjourney —Å–µ—Ä–≤–∏—Å (${mjQty} –∑–∞–ø—Ä–æ—Å–æ–≤)`,
				uid: ctx.session.botUserSession.userGuid,
				serviceName: GroupTransactionServiceName.MJ,
				purchasedQty: mjService,
			};

			const gptAndMjParamsRobokassa: IGetPaymentLinkParams = {
				amount: Number(gpt_mjPrice),
				currency: GroupTransactionCurrency.RUB,
				description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ GPT —Å–µ—Ä–≤–∏—Å (${gpt_mj_gptQty} –∑–∞–ø—Ä–æ—Å–æ–≤) –∏ Midjourney —Å–µ—Ä–≤–∏—Å (${gpt_mj_mjQty} –∑–∞–ø—Ä–æ—Å–æ–≤)`,
				uid: ctx.session.botUserSession.userGuid,
				serviceName: GroupTransactionServiceName.GPT_MJ,
				purchasedQty: gpt_mj_mjService,
			};

			const { url: gptUrl } = await this.robokassaService.getPaymentLink(gptParamsRobokassa) as IGetPaymentLinkResponse;

			const { url: mjUrl } = await this.robokassaService.getPaymentLink(mjParamsRobokassa) as IGetPaymentLinkResponse;

			// tslint:disable-next-line: max-line-length
			const { url: gptAndMjUrl } = await this.robokassaService.getPaymentLink(gptAndMjParamsRobokassa) as IGetPaymentLinkResponse;

			const { message_id: messageId } = await ctx.replyWithHTML(text, Markup.inlineKeyboard([
				[
					Markup.button.url(`1) ü§ñ Gpt ${gptPrice}‚ÇΩ`, gptUrl)
				],
				[
					Markup.button.url(`2) üéë Midjourney ${mjPrice}‚ÇΩ`, mjUrl)
				],
				[
					Markup.button.url(`3) üîù GPT + Midjourney ${gpt_mjPrice}‚ÇΩ`, gptAndMjUrl)
				],
			]));

			if (messageId) {
				ctx.session.botUserSession.paymentMessageId = messageId;
				this.sessionService.updateSession(ctx);
			}

			await this.moveToRespectiveChat(ctx);
		});

		paymentScene.on('message', async (ctx) => {

			const text =
				`
–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ üëÜüèæ 

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Midjourney, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /img

`;

			const { message_id: messageId } = await ctx.replyWithHTML(text);

			// tslint:disable-next-line: no-shadowed-variable
			setTimeout(async () => {
				await ctx.deleteMessage(messageId);
			}, 10000);

		});


		return paymentScene;
	}

	private async pushToPaymentScene(): Promise<BaseScene> {

		const pushToPaymentScene = new BaseScene('pushToPaymentScene');

		await this.activateCommands(pushToPaymentScene);

		let messageId: number;

		const text =
			`
–ö <i>—Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É</i>, <b>—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å–æ –º–Ω–æ–π ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b> üëá
`;

		// tslint:disable-next-line: no-any
		pushToPaymentScene.enter(async (ctx: any) => {

			const { message_id } = await ctx.replyWithHTML(text, Markup.inlineKeyboard([
				[
					Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ', 'make_payment')
				]
			]));

			messageId = message_id;

		});

		// tslint:disable-next-line: no-any
		pushToPaymentScene.action('make_payment', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã"');
			await ctx.deleteMessage();
			await ctx.scene.enter('paymentScene');
		});

		// pushToPaymentScene.on('message', async (ctx) => {

		// 	if (messageId) {
		// 		await ctx.deleteMessage(messageId);
		// 	}

		// 	const { message_id } = await ctx.replyWithHTML(text, Markup.inlineKeyboard([
		// 		[
		// 			Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ', 'make_payment')
		// 		]
		// 	]));

		// 	messageId = message_id;

		// });

		// this.pushToPaymentSceneProp = pushToPaymentScene;

		pushToPaymentScene.on('message', async (ctx) => {

			// tslint:disable-next-line: no-shadowed-variable
			const text =
				`
–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ üëÜüèæ 

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Midjourney, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /img

`;

			// tslint:disable-next-line: no-shadowed-variable
			const { message_id: messageId } = await ctx.replyWithHTML(text);

			// tslint:disable-next-line: no-shadowed-variable
			setTimeout(async () => {
				await ctx.deleteMessage(messageId);
			}, 10000);

		});

		return pushToPaymentScene;
	}

	private async infoScene(): Promise<BaseScene> {

		const infoScene = new BaseScene('infoScene');

		await this.activateCommands(infoScene);

		// tslint:disable-next-line: no-any
		infoScene.enter(async (ctx: any) => {

			if (!ctx.session.botUserSession.userGuid) {
				throw new Error(`No ctx.session.botUserSession.userGuid`);
			}

			const serviceUsageData = await this.utils.getServiceUsageInfo(ctx.session.botUserSession.userGuid);

			if (!serviceUsageData) {
				throw new Error(`Could not get service usage data`);
			}
			const {
				gptPurchased,
				gptLeft,
				mjPurchased,
				mjLeft,
				gptFreeReceived,
				gptFreeLeft,
				mjFreeReceived,
				mjFreeLeft,
			} = serviceUsageData;

			const text =
				`
<i>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ <b>Gpt</b> (–¥–æ—Å—Ç—É–ø–Ω–æ):</i> <b>${gptFreeLeft}</b> –∏–∑ <b>${gptFreeReceived}</b>

<i>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ <b>Midjourney</b> (–¥–æ—Å—Ç—É–ø–Ω–æ):</i> <b>${mjFreeLeft}</b> –∏–∑ <b>${mjFreeReceived}</b>

‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

<i>–ü–ª–∞—Ç–Ω—ã—Ö</i> <b>–∑–∞–ø—Ä–æ—Å–æ–≤ Gpt</b> (–¥–æ—Å—Ç—É–ø–Ω–æ): <b>${gptLeft}</b> –∏–∑ <b>${gptPurchased}</b>

<i>–ü–ª–∞—Ç–Ω—ã—Ö</i> <b>–∑–∞–ø—Ä–æ—Å–æ–≤ Midjourney</b> (–¥–æ—Å—Ç—É–ø–Ω–æ): <b>${mjLeft}</b> –∏–∑ <b>${mjPurchased}</b>
	
	`;

			await ctx.replyWithHTML(text, Markup.inlineKeyboard([
				[
					Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é  üîô', 'menu')
				]
			]));
		});

		// tslint:disable-next-line: no-any
		infoScene.action('menu', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ú–µ–Ω—é"');
			await ctx.deleteMessage();
			await ctx.scene.enter('menuScene');
		});

		infoScene.on('message', async (ctx) => {

			const text =
				`
–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ üëÜüèæ 

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Midjourney, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /img

`;

			// tslint:disable-next-line: no-shadowed-variable
			const { message_id: messageId } = await ctx.replyWithHTML(text);

			// tslint:disable-next-line: no-shadowed-variable
			setTimeout(async () => {
				await ctx.deleteMessage(messageId);
			}, 10000);

		});


		return infoScene;
	}

	private async helpScene(): Promise<BaseScene> {

		const helpScene = new BaseScene('helpScene');

		await this.activateCommands(helpScene);


		helpScene.enter(async (ctx) => {

			const text =
				`
<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã</b> <i>–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i> @mindmatehelp
`;
			await ctx.replyWithHTML(text, Markup.inlineKeyboard([
				[
					Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é  üîô', 'menu')
				]
			]));

		});

		// tslint:disable-next-line: no-any
		helpScene.action('menu', async (ctx: any) => {
			await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ú–µ–Ω—é"');
			await ctx.deleteMessage();
			await ctx.scene.enter('menuScene');
		});

		helpScene.on('message', async (ctx) => {

			const text =
				`
–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ üëÜüèæ 

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt

‚Äî –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Midjourney, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /img

`;

			// tslint:disable-next-line: no-shadowed-variable
			const { message_id: messageId } = await ctx.replyWithHTML(text);

			// tslint:disable-next-line: no-shadowed-variable
			setTimeout(async () => {
				await ctx.deleteMessage(messageId);
			}, 10000);

		});


		return helpScene;
	}

	// tslint:disable-next-line: no-any
	private async gptOnMessage(ctx: any, scene: BaseScene<Context<Update>>) {

		if (ctx.session.botUserSession.pendingChatGptRequest) {

			// tslint:disable-next-line: no-shadowed-variable
			const { message_id } = await ctx.replyWithHTML(this.secondRequestText);
			setTimeout(() => {
				ctx.deleteMessage(message_id);
			}, 5000);

		} else {

			const { message_id } = await ctx.replyWithHTML(this.textOnMessage);

			const text = ctx.message.text;

			this.setTextSessionData(ctx, ctx.message.text, ctx.message.message_id);

			const { userGuid, chatId } = await this.getUserData(ctx);

			this.mainController.orchestrator<AiTextResponsePayload[]>(userGuid, chatId, text, RequestCategory.chatText)
				.then(
					async (result) => {

						let msgText = '';

						await ctx.deleteMessage(message_id);

						if (!Array.isArray(result.payload)) {
							throw new Error(`result.payload should be array, result:\n${JSON.stringify(result)}`);
						}

						switch (result.status) {
							case ControllerStatus.SUCCESS:

								let i = 1;

								for (const elem of result.payload as AiTextResponsePayload[]) {

									msgText = result.payload.length > 1
										? `<b>–û—Ç–≤–µ—Ç ${i} üëá</b>\n\n${elem.payload}`
										: elem.payload;
									i++;

									switch (elem.finishReason) {
										case OpenAiChatFinishReason.stop:
										case OpenAiChatFinishReason.content_filter:
										case OpenAiChatFinishReason.null:
											await ctx.replyWithHTML(msgText,
												{ reply_to_message_id: ctx.update.message.message_id });

											this.clearTextSessionData(ctx);

											break;

										case OpenAiChatFinishReason.length:
											await ctx.replyWithHTML(msgText,
												{
													reply_to_message_id: ctx.update.message.message_id,
													...Markup.inlineKeyboard([
														[
															Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∞–π üìù', 'stream_request')
														]
													])
												}
											);
											break;

										default:
											this.logger.error(`Unknown finishReason: ${elem.finishReason}`);
											await ctx.replyWithHTML(msgText,
												{ reply_to_message_id: ctx.update.message.message_id });

											this.clearTextSessionData(ctx);
									}
								}

								break;

							case ControllerStatus.ACTION_PAYMENT:

								await ctx.replyWithHTML(this.pushToPayText,
									Markup.inlineKeyboard([
										[
											Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã ‚úÖ', 'pay_package')
										]
									])
								);

								this.clearTextSessionData(ctx);

								break;

							case ControllerStatus.ERROR:
								this.logger.error(`Error respose from MainController.orchestrator:\n${JSON.stringify(result)}`);

								await ctx.deleteMessage(message_id);

								await this.sendErrorMsgOnTextResponse(ctx);

								break;

							default:

								this.logger.error(`UserGuid=${userGuid}, Unknown result.status, result:\n${JSON.stringify(result)}`);

								this.clearTextSessionData(ctx);
						}
					},
					async (error) => {

						this.logger.error(`UserGuid: ${userGuid}, Error response from mainController.orchestrator: ${error}`);

						await ctx.deleteMessage(message_id);

						if (!ctx.session.botUserSession.textRequestMessageId) {
							this.logger.error(`UserGuid: ${ctx.session.botUserSession.userGuid}, Missing ctx.session.botUserSession.textRequestMessageId`);
							await ctx.replyWithHTML(this.errorResponseText);
						} else {
							await ctx.replyWithHTML(this.errorResponseText,
								{ reply_to_message_id: ctx.session.botUserSession.textRequestMessageId });
						}

						this.clearTextSessionData(ctx);

					}
				);

		}
	}

	// tslint:disable-next-line: no-any
	private async gptActionStreamRequest(ctx: any, scene: BaseScene<Context<Update>>): Promise<void> {

		await ctx.answerCbQuery('–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...');

		await ctx.replyWithHTML(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b><i>–ü—Ä–æ–¥–æ–ª–∂–∞–π üìù</i></b>`);
		await ctx.editMessageReplyMarkup({ inline_keyboard: [] });


		if (ctx.session.botUserSession.pendingChatGptRequest) {

			// tslint:disable-next-line: no-shadowed-variable
			const { message_id } = await ctx.replyWithHTML(this.secondRequestText);
			setTimeout(() => {
				ctx.deleteMessage(message_id);
			}, 5000);

		} else {

			const { message_id } = await ctx.replyWithHTML(this.textOnMessage);

			if (!ctx.session.botUserSession.textRequest) {
				throw new Error(`Missing ctx.session.botUserSession.textRequest`);
			}

			const text = ctx.session.botUserSession.textRequest;

			ctx.session.botUserSession.pendingChatGptRequest = true;

			this.sessionService.updateSession(ctx);

			const { userGuid, chatId } = await this.getUserData(ctx);

			this.mainController.orchestrator<AiTextResponsePayload>(userGuid, chatId, text, RequestCategory.chatTextStream)
				.then(
					async (result) => {

						this.clearTextSessionData(ctx);

						let msgText = '';

						await ctx.deleteMessage(message_id);

						msgText = result.payload.payload;

						if (!ctx.session.botUserSession.textRequestMessageId) {
							this.logger.error(`UserGuid: ${ctx.session.botUserSession.userGuid}, Missing ctx.session.botUserSession.textRequestMessageId`);
							await ctx.replyWithHTML(msgText);
						} else {
							await ctx.replyWithHTML(msgText, { reply_to_message_id: ctx.session.botUserSession.textRequestMessageId });
						}

					},
					async (error) => {

						this.logger.error(`UserGuid: ${userGuid}, Error response from mainController.orchestrator: ${error}`);

						await ctx.deleteMessage(message_id);

						if (!ctx.session.botUserSession.textRequestMessageId) {
							this.logger.error(`UserGuid: ${ctx.session.botUserSession.userGuid}, Missing ctx.session.botUserSession.textRequestMessageId`);
							await ctx.replyWithHTML(this.errorResponseText);
						} else {
							await ctx.replyWithHTML(this.errorResponseText,
								{ reply_to_message_id: ctx.session.botUserSession.textRequestMessageId });
						}

						this.clearTextSessionData(ctx);
					}
				);
		}
	}

	private async sendErrorMsgOnTextResponse(ctx: IBotContext): Promise<void> {
		if (!ctx.session.botUserSession.textRequestMessageId) {
			this.logger.error(`UserGuid: ${ctx.session.botUserSession.userGuid}, Missing ctx.session.botUserSession.textRequestMessageId:
			\n${JSON.stringify(ctx.session.botUserSession)}`);
			await ctx.replyWithHTML(this.errorResponseText);
		} else {
			await ctx.replyWithHTML(this.errorResponseText,
				{ reply_to_message_id: ctx.session.botUserSession.textRequestMessageId });
		}

		this.clearTextSessionData(ctx);

	}

	private setTextSessionData(ctx: IBotContext, text: string, messageId: number): void {
		ctx.session.botUserSession.pendingChatGptRequest = true;
		ctx.session.botUserSession.textRequest = text;
		ctx.session.botUserSession.textRequestMessageId = messageId;
		this.sessionService.updateSession(ctx);
	}

	private clearTextSessionData(ctx: IBotContext): void {
		ctx.session.botUserSession.pendingChatGptRequest = false;
		ctx.session.botUserSession.textRequest = '';
		ctx.session.botUserSession.textRequestMessageId = 0;
		this.sessionService.updateSession(ctx);
	}

	private async getUserGuid(ctx: IBotContext): Promise<string | null> {
		if (ctx.session.botUserSession.userGuid) {

			return ctx.session.botUserSession.userGuid;
		} else {

			const { fromId, chatId } = this.utils.getChatIdObj(ctx);

			if (!fromId || !chatId) {
				this.logger.error(`Could not get fromId/chatId from ctx`);
				return null;
			}

			const userRecRaw = await this.dbConnection
				.selectFrom('users')
				.selectAll()
				.where('fromId', '=', fromId)
				.where('chatId', '=', chatId)
				.execute();

			if (
				!userRecRaw
				|| !Array.isArray(userRecRaw)
				|| userRecRaw.length !== 1
			) {
				this.logger.error(`Wrong response from DB on user with chatId=${chatId} and fromId=${fromId}, result:\n${JSON.stringify(userRecRaw)}`);
				return null;
			}

			return userRecRaw[0].guid;
		}


	}

	private async getUserData(ctx: IBotContext): Promise<{ userGuid: string, chatId: number, fromId: number }> {
		// tslint:disable-next-line: max-line-length
		const userGuid = await this.getUserGuid(ctx);

		const { chatId, fromId } = this.utils.getChatIdObj(ctx);

		if (!userGuid) {
			throw new Error(`Could not get userGuid for user with chatId=${chatId} and fromId=${fromId}`);
		}

		if (!chatId) {
			throw new Error(`Could not get chatId for userGuid=${userGuid}`);
		}

		if (!fromId) {
			throw new Error(`Could not get fromId for userGuid=${userGuid}`);
		}

		return {
			userGuid,
			chatId,
			fromId
		};
	}

	/**
	 * Wizard scenes
	 */

}